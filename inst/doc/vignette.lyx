#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{natbib}
\usepackage{url}
\usepackage{tikz}
\usetikzlibrary{matrix}
\end_preamble
\use_default_options true
\begin_modules
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\boxbgcolor #dbdbdb
\branch answer
\selected 1
\filename_suffix 0
\color #faf0e6
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\rightmargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Introduction to 
\series bold
RcppSimpleTensor
\end_layout

\begin_layout Author
Thibaut Lamadon and Florian Oswald
\begin_inset Newline newline
\end_inset


\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/tlamadon/RcppSimpleTensor
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
SweaveOpts{fig.path=figure/,fig.align=center,fig.show=hold}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<setup,echo=FALSE,results=hide,message=FALSE>>=
\end_layout

\begin_layout Plain Layout

options(replace.assign=TRUE)
\end_layout

\begin_layout Plain Layout

knit_hooks$set(par=function(before, options, envir){if (before) par(mar=c(4,4,.1,.
1),cex.lab=.95,cex.axis=.9,mgp=c(2,.7,0),tcl=-.3,las=1)})
\end_layout

\begin_layout Plain Layout

library(ggplot2)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
In this vignette we will introduce the 
\series bold
RcppSimpleTensor 
\series default
package by some examples.
 For information regarding installation, please refer to the website (above).
 We will first demonstrate usage with the help of a very simple example
 that permits a graphical representation.
 Then we will present an application that uses 
\series bold
RcppSimpleTensor
\series default
, where we want to find an approximatin to the integral of a multivariate
 function.
 
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
Usage
\end_layout

\begin_layout Standard
Tensor algebra is a convenient way to deal with high-dimensional objects.
 In a way, it is like matrix multiplication for arrays of general dimension
 N-D.
 Note, however, that the operations one can perform with the package are
 
\series bold
not restricted to be matrix multiplication only
\series default
, but 
\series bold
any kind of mathematical operation
\series default
 
\emph on
along a given index
\emph default
 of an array.
 In this section we demonstrate some ways to use the library by operating
 on three arrays 
\family typewriter
A
\family default
, 
\family typewriter
b
\family default
 and 
\family typewriter
B
\family default
, defined as follows:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<usage-data>>=
\end_layout

\begin_layout Plain Layout

A <- array(1:8,dim=c(2,2,2)) 
\end_layout

\begin_layout Plain Layout

b <- array(1,dim=c(2,1)) 
\end_layout

\begin_layout Plain Layout

B <- array(1,dim=c(2,2)) 
\end_layout

\begin_layout Plain Layout

print(A)
\end_layout

\begin_layout Plain Layout

print(b)
\end_layout

\begin_layout Plain Layout

print(B)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Multidimensional Multiplication
\end_layout

\begin_layout Standard
We will use the two main functions in 
\series bold
RcppSimpleTensor
\series default
, 
\family typewriter
tensorFunction
\family default
 and 
\family typewriter
TI
\family default
, to show different forms of matrix multiplication.
 The two functions perform the same tasks, the difference is that 
\family typewriter
TI
\family default
 is for inline use, and 
\family typewriter
tensorFunction
\family default
 needs to be defined before usage.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
tibo: you should here (or at some point) explain this difference a bit better.
 in particular the issue of being able to call tensorFunction from within
 an evironment where it was not defined.
 (?)
\end_layout

\end_inset

First of all, notice that array 
\family typewriter
A
\family default
 can be visualized as a cube (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-array-a"

\end_inset

).
 
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}
\end_layout

\begin_layout Plain Layout

[back line/.style={densely dotted},cross line/.style={preaction={draw=white,
 -,line width=6pt}}] 
\end_layout

\begin_layout Plain Layout


\backslash
matrix (m) [matrix of math nodes,row sep=3em, column sep=5em,text height=1.5ex,te
xt depth=0.25ex]{& 5  & & 7 
\backslash

\backslash
 1 & & 3 
\backslash

\backslash
 & 6 & & 8 
\backslash

\backslash
 2 & & 4 
\backslash

\backslash
 }; 
\end_layout

\begin_layout Plain Layout


\backslash
path[-] (m-1-2) edge (m-1-4) edge (m-2-1) edge [back line] (m-3-2) (m-1-4)
 edge (m-3-4) edge (m-2-3) (m-2-1) edge [cross line] (m-2-3) edge (m-4-1)
 (m-3-2) edge [back line] (m-3-4) edge [back line] (m-4-1) (m-4-1) edge
 (m-4-3) (m-3-4) edge (m-4-3) (m-2-3) edge [cross line] (m-4-3); 
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Array 
\family typewriter
A
\begin_inset CommandInset label
LatexCommand label
name "fig:The-array-a"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset

 We will now perform operations along the 3 different indices of 
\family typewriter
A
\family default
, and we will denote those indices 
\family typewriter
i
\family default
 (vertical direction), 
\family typewriter
j
\family default
 (horizontal direction) and 
\family typewriter
k
\family default
 (in-depth direction).
 All of our examples are a form of tensor reduction, i.e.
 we operate along a certain dimension of an array to reduce the array in
 this dimension.
 In terms of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-array-a"

\end_inset

, we would flatten the cube along a certain index, applying a certain operation
 to the elements.
 Needless to say, the gains from using 
\series bold
RcppSimpleTensor
\series default
 get larger as the dimension of a grows, but we will go with this easy example
 for illustration.
\end_layout

\begin_layout Subsubsection
Matrix multiply 
\family typewriter
A
\family default
 with 
\family typewriter
b
\family default
 along index 
\family typewriter
i
\end_layout

\begin_layout Standard
As a first task, we want to multiply 
\family typewriter
A
\family default
 with vector 
\family typewriter
b
\family default
 along their common index 
\family typewriter
i
\family default
, that is, along the vertical direction of 
\family typewriter
A
\family default
.
 This means our result will still have indices
\family typewriter
 j
\family default
 and 
\family typewriter
k
\family default
, as we only 
\begin_inset Quotes eld
\end_inset

flattened-out
\begin_inset Quotes erd
\end_inset

 
\family typewriter
A
\family default
 along dimension 
\family typewriter
i
\family default
:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<usage1,message=FALSE,tidy=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(RcppSimpleTensor)
\end_layout

\begin_layout Plain Layout

# 1.
 define tensor function
\end_layout

\begin_layout Plain Layout

tensFunc <- tensorFunction( R[k,j] ~ A[i,j,k] * b[i] )
\end_layout

\begin_layout Plain Layout

# 2.
 and call it
\end_layout

\begin_layout Plain Layout

y <- tensFunc( A, b)
\end_layout

\begin_layout Plain Layout

y
\end_layout

\begin_layout Plain Layout

# or define the tensor inline with TI()
\end_layout

\begin_layout Plain Layout

y <- TI( A[i,j,k] * b[i], k + j)
\end_layout

\begin_layout Plain Layout

y
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Notice that this is like looking at the cube from above and performing the
 operation 
\family typewriter
A[ ,j,k] * b
\family default
 at each pair of coordinates (j,k).
 If we let 
\begin_inset Formula $y_{i,j}$
\end_inset

 be the element in row 
\begin_inset Formula $i$
\end_inset

, column 
\begin_inset Formula $j$
\end_inset

, we obtained 
\begin_inset Formula 
\begin{eqnarray*}
y_{1,1} & = & A_{1,1,1}b_{1}+A_{2,1,1}b_{2}=1\cdot1+2\cdot1=3\\
y_{2,1} & = & A_{1,2,1}b_{1}+A_{2,2,1}b_{2}=3\cdot1+4\cdot1=7\\
y_{1,2} & = & A_{1,1,2}b_{1}+A_{2,1,2}b_{2}=5\cdot1+6\cdot1=11\\
y_{2,2} & = & A_{1,2,2}b_{1}+A_{2,2,2}b_{2}=7\cdot1+8\cdot1=15
\end{eqnarray*}

\end_inset

In (Einstein) tensor notation
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The tensor notation is named after Einstein if one dispenses with the summation
 sign.
 The convention is that one is summing over the index that disappears from
 the resulting left hand side.
 See 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://en.wikipedia.org/wiki/Einstein_notation
\end_layout

\end_inset

.
\end_layout

\end_inset

, our operation is defined as 
\begin_inset Formula 
\begin{eqnarray*}
y_{j,k} & = & A_{i,j,k}b_{i}\\
 & = & \sum_{i}A_{i,j,k}b_{i}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Subsubsection
Matrix multiply along 
\family typewriter
j
\end_layout

\begin_layout Standard
In exact analogy to above, we can assign 
\family typewriter
b
\family default
 to a different (matching!) index of 
\family typewriter
A
\family default
 -- in this case 
\family typewriter
j
\family default
.
 We want to do 
\begin_inset Formula 
\begin{eqnarray*}
y_{i,k} & = & \sum_{j}A_{i,j,k}b_{j}
\end{eqnarray*}

\end_inset

Thus, we obtain an 
\family typewriter
ni
\family default
 by 
\family typewriter
nk
\family default
 array, where 
\family typewriter
nx 
\family default
is the number of elements in dimension 
\family typewriter
x
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<usage2>>=
\end_layout

\begin_layout Plain Layout

TI( A[i,j,k] * b[j], k + i)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Matrix multiply with array
\end_layout

\begin_layout Standard
Now we do the same with 2 dimensional array 
\family typewriter
B
\family default
.
 Much in the same way, we specify common indices, and give the index we
 wish to keep in the result to 
\family typewriter
TI()
\family default
.
 In terms of tensor notation, we want to do 
\begin_inset Formula 
\begin{eqnarray*}
y_{k} & = & \sum_{i}\sum_{j}A_{i,j,k}B_{i,j}
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<usage3>>=
\end_layout

\begin_layout Plain Layout

TI( A[i,j,k] * B[i,j], k)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Other Multidimensional Operations
\end_layout

\begin_layout Standard
As mentioned above, you are not restricted to do multiplication.
 In general, the functions will accept any binary operator.
 Let's see two examples.
 First, let's take 
\family typewriter
A
\family default
 to the power of 
\family typewriter
b
\family default
 along index 
\family typewriter
k
\family default
:
\begin_inset Formula 
\begin{eqnarray*}
y_{i,j} & = & \sum_{k}\left(A_{i,j,k}\right)^{b_{k}}
\end{eqnarray*}

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<other1>>=
\end_layout

\begin_layout Plain Layout

TI( A[i,j,k] ^ b[k], i + j ) 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Secondly, let's sum up the cosines of elements of 
\family typewriter
A
\family default
 and 
\family typewriter
B
\family default
, keeping only dimension 
\family typewriter
k
\family default
:
\begin_inset Formula 
\begin{eqnarray*}
y_{k} & = & \sum_{i}\sum_{k}\cos\left(A_{i,j,k},B_{i,j}\right)
\end{eqnarray*}

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

<<other2>>=
\end_layout

\begin_layout Plain Layout

TI( cos(A[i,j,k],B[i,j]), k ) 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section
Under the hood
\end_layout

\begin_layout Standard
In this section we'll present more about what is happening under the hood
 of RcppSimpleTensor.
 This is for users that want to understand better what exactly is going
 on in this package.
\end_layout

\begin_layout Subsection
Expression parsing and compilation
\end_layout

\begin_layout Standard
TensorFunction and TI take the expression, extract the relevant indices
 and then generates a C++ file.
 The C++ file is then compiled.
 The source file and the compiled library are located in the .tensor folder
 in the working directory.
 You can go to that folder and see their content.
 Additionally, if you call the tensorFunction with the verbose argument,
 this will display all of the compilation steps.
\end_layout

\begin_layout Standard
After the compilation is done, the library is linked to the R environment
 and wrapped into an R function that correctly deals with the different
 dimensions.
\end_layout

\begin_layout Subsection
Caching
\end_layout

\begin_layout Standard
Obviously the compilation phase takes quite a long time and is unnecessary
 if the tensor expression has not changed.
 For that reason RcppSimpleTensor has a caching mechanism.
 When tensorFunction is called, a hash is created from the tensor expression.
 This hash is used to create the C++ file and the library.
 Before compiling the tensor, the function checks if such a library already
 exists locally and if it does, it links to it.
\end_layout

\begin_layout Standard
You can see how much faster the second call for a similar tensor is:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<caching1,message=FALSE,tidy=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(RcppSimpleTensor)
\end_layout

\begin_layout Plain Layout

# 1.
 define tensor function, it will need to create the source and compile
\end_layout

\begin_layout Plain Layout

system.time(tensFunc <- tensorFunction( R[k,j] ~ A[i,j,k] * b[i,n] ,cache=FALSE))
\end_layout

\begin_layout Plain Layout

# 2.
 call it again, it uses the cached library
\end_layout

\begin_layout Plain Layout

system.time(tensFunc <- tensorFunction( R[k,j] ~ A[i,j,k] * b[i,n] ))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This caching mechanism will also work for the TI() function.
 However linking is itself slow compared to just a function call.
 For that reason, to make TI() as fast as possible we use another caching
 mechanism.
 The TI context stores a list of all TI expressions.
 When TI gets called, it looks in this list if the tensor called has already
 been linked to the R context.
 If that is the case, we don't want to load the library again, it's already
 there.
 
\end_layout

\begin_layout Standard
As a demo, we are going to make 3 calls to TI, the first one will require
 compilation, the second one will require a linking, the third one will
 use level-2 caching.
 Let's compare the speeds:
\end_layout

\begin_layout Subsection
Setting compiler flags for better performance
\end_layout

\begin_layout Standard
By default your compiler flags won't have the -O3 flag which will give you
 the best performance.
 To activate that create a MakeVars file in your ~/.R/ directory and add
 the following to it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CXXFLAGS = -O3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That will significantly increase the performances of your tensor expressions!
\end_layout

\begin_layout Section
Application: Evaluation of multidimensional B-splines
\end_layout

\begin_layout Standard

\series bold
Disclaimer:
\series default
 This section is likely to be useful only if you have some prior knowledge
 about B-spline approximation.
 
\end_layout

\begin_layout Standard
We will use observational data to approximate a multivariate function (or
 a 
\emph on
data generating process
\emph default
) on a space of tensor products of univariate B-splines.
 The function we want to approximte is defined as
\begin_inset Formula 
\begin{eqnarray*}
f:X\times Y\times Z & \mapsto & \mathbb{R}\\
f(x,y,z) & = & \left(x+y-5\right)^{2}+(z-5)^{2}
\end{eqnarray*}

\end_inset

and 
\begin_inset Formula $X,Y,Z\subset\mathbb{R}$
\end_inset

.
 We will get data on 
\begin_inset Formula $f$
\end_inset

 at a grid of points 
\begin_inset Formula $\left\{ x_{i},y_{j},z_{k}\right\} $
\end_inset

, and use this to compute an approximant to 
\begin_inset Formula $f$
\end_inset

.
 The coefficients obtained from the approximation procedure can in conjunction
 with the basis be used to approximate the function at an arbitrary set
 of points (in the approximation domain).
 We will use this to perform integration over one, and then 2 dimensions
 of this function with quadrature methods, i.e.
 we want to approximate
\begin_inset Formula 
\begin{eqnarray*}
E_{Y}\left[f(x,y,z)\right] & = & \int f(x,y,z)g(y)dy\\
E_{Z}\left[f(x,y,z)\right] & = & \int f(x,y,z)s(z)dz\\
E_{YZ}\left[f(x,y,z)\right] & = & \int f(x,y,z)s(z)g(y)dzdy
\end{eqnarray*}

\end_inset

where 
\begin_inset Formula $g,s$
\end_inset

 are the pdf of 
\begin_inset Formula $y,z$
\end_inset

 respectively.
 The advantages of 
\series bold
RcppSimpleTensor
\series default
 are that we can write our code in a way which is very close to the mathematical
 expression, and we have a way to easily increase the number of dimensions
 with little additional cost.
 
\end_layout

\begin_layout Subsection
Data Setup
\end_layout

\begin_layout Standard
The general idea is to estimate the 
\begin_inset Formula $f$
\end_inset

 at relatively few grid points (
\family typewriter
num.x
\family default
, 
\family typewriter
num.y
\family default
 and 
\family typewriter
num.z
\family default
), to then be able to obtain a function value at an arbitrary point.
 Imagine a setup where calculating 
\begin_inset Formula $f$
\end_inset

 is costly, such that we want 
\family typewriter
num.x + num.y + num.z
\family default
 to be small.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<spline-setup,tidy=FALSE,message=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(splines)
\end_layout

\begin_layout Plain Layout

if (!require(statmod)) install.packages('statmod')
\end_layout

\begin_layout Plain Layout

library(statmod)
\end_layout

\begin_layout Plain Layout

# number of evaluation points in each dimension 
\end_layout

\begin_layout Plain Layout

num.x <- 10 
\end_layout

\begin_layout Plain Layout

num.y <- 8 
\end_layout

\begin_layout Plain Layout

num.z <- 4
\end_layout

\begin_layout Plain Layout

# choose number of integration nodes and method 
\end_layout

\begin_layout Plain Layout

num.int.z <- 50 
\end_layout

\begin_layout Plain Layout

num.int.y <- 40 
\end_layout

\begin_layout Plain Layout

int.z <- gauss.quad(n=num.int.z,kind="hermite")   
\end_layout

\begin_layout Plain Layout

int.y <- gauss.quad(n=num.int.y,kind="hermite")
\end_layout

\begin_layout Plain Layout

# select degree of splines 
\end_layout

\begin_layout Plain Layout

degree <- 3 
\end_layout

\begin_layout Plain Layout

# get spline knot vector defined on nodes 
\end_layout

\begin_layout Plain Layout

xknots <- c(rep(0,times=degree),seq(0,10,le=num.x),rep(10,times=degree))
  
\end_layout

\begin_layout Plain Layout

zknots<-c(rep(min(int.z$nodes),times=degree),
\end_layout

\begin_layout Plain Layout

seq(int.z$nodes[1],int.z$nodes[num.int.z],le=num.z),
\end_layout

\begin_layout Plain Layout

rep(max(int.z$nodes),times=degree)) 
\end_layout

\begin_layout Plain Layout

yknots<-c(rep(min(int.y$nodes),times=degree),
\end_layout

\begin_layout Plain Layout

seq(int.y$nodes[1],int.y$nodes[num.int.y],le=num.y),
\end_layout

\begin_layout Plain Layout

rep(max(int.y$nodes),times=degree))
\end_layout

\begin_layout Plain Layout

# get grid points where to evaluate function
\end_layout

\begin_layout Plain Layout

xdata <- as.array(seq(0,10,length=length(xknots)-degree-1)) 
\end_layout

\begin_layout Plain Layout

ydata <- as.array(seq(int.y$nodes[1],int.y$nodes[num.int.y],length=length(yknots)-deg
ree-1)) 
\end_layout

\begin_layout Plain Layout

zdata <- as.array(seq(int.z$nodes[1],int.z$nodes[num.int.z],length=length(zknots)-deg
ree-1))
\end_layout

\begin_layout Plain Layout

# design matrices 
\end_layout

\begin_layout Plain Layout

X <- splineDesign(knots=xknots,x=xdata) 
\end_layout

\begin_layout Plain Layout

Y <- splineDesign(knots=yknots,x=ydata) 
\end_layout

\begin_layout Plain Layout

Z <- splineDesign(knots=zknots,x=zdata)
\end_layout

\begin_layout Plain Layout

DGP <- function( x,y,z ) { return((x + y - 5)^2 + (z-5)^2) } 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Generate Data: Evaluate the function
\end_layout

\begin_layout Standard
We compare evaluation time of the 3-dimensional function with a mapply operation
 and with 
\series bold
RcppSimpleTensor
\series default
, as follows:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<evaluate,tidy=FALSE>>=
\end_layout

\begin_layout Plain Layout

data.grid <- expand.grid(x=xdata,y=ydata,z=zdata) 
\end_layout

\begin_layout Plain Layout

trad.time<-system.time(
\end_layout

\begin_layout Plain Layout

traditional<-array(with(data.grid,mapply(DGP,x,y,z)),
\end_layout

\begin_layout Plain Layout

dim=c(length(xdata),length(ydata),length(zdata))))
\end_layout

\begin_layout Plain Layout

# evaluate function with RcppSimpleTensor 
\end_layout

\begin_layout Plain Layout

# define a tensor function to calculate function values: 
\end_layout

\begin_layout Plain Layout

RcppVals <- tensorFunction( R[i,j,k] ~ (X[i] + Y[j] - 5)^2 + (Z[k] - 5)^2
 ) 
\end_layout

\begin_layout Plain Layout

# read: return array indexed by [i,j,k], defined as (x[i] + y[j] - 5)^2
 + (z[k]-5)^2 
\end_layout

\begin_layout Plain Layout

Rcpp.time <- system.time( RcppArray <- RcppVals(xdata,ydata,zdata) ) 
\end_layout

\begin_layout Plain Layout

# check result
\end_layout

\begin_layout Plain Layout

sum(abs(traditional - RcppArray)) 
\end_layout

\begin_layout Plain Layout

# see timing
\end_layout

\begin_layout Plain Layout

print(rbind(trad.time,Rcpp.time)) 
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Visualize the function
\end_layout

\begin_layout Standard
Just for orientation, let's plot the function at the highest and lowest
 value of variable z, respectively (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:function-DGP-on"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<plotfun,par=TRUE,tidy=FALSE,echo=FALSE,fig.width=4,fig.height=4,out.width=0.45
\backslash
linewidth,cache=FALSE>>=
\end_layout

\begin_layout Plain Layout

zind <- 1:length(zdata); 
\end_layout

\begin_layout Plain Layout

persp(x=xdata,y=ydata,z=RcppArray[,,tail(zind,1)],ticktype="detailed",xlab="x",y
lab="y",zlab="value",theta=300,phi=30);
\end_layout

\begin_layout Plain Layout

persp(x=xdata,y=ydata,z=RcppArray[,,head(zind,1)],ticktype="detailed",xlab="x",y
lab="y",zlab="value",theta=300,phi=30);
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
function 
\family typewriter
DGP 
\family default
on the evaluation grid at highest and lowest point of 
\begin_inset Formula $z$
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "fig:function-DGP-on"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Compute Approximant on Grid
\end_layout

\begin_layout Standard
Now we obtain the approximating coefficients 
\begin_inset Formula $b$
\end_inset

 by solving the system 
\begin_inset Formula 
\[
y=bA
\]

\end_inset

where 
\begin_inset Formula $y$
\end_inset

 are the function values at each grid point, 
\begin_inset Formula $b$
\end_inset

 is our vector of coefficients and 
\begin_inset Formula $A$
\end_inset

 is the tensor product of spaces of grid points 
\begin_inset Formula $X$
\end_inset

, 
\begin_inset Formula $Y$
\end_inset

 and 
\begin_inset Formula $Z$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<get-coeffs>>=
\end_layout

\begin_layout Plain Layout

b <- solve(kronecker(Z,kronecker(Y,X)), as.vector(RcppArray))
\end_layout

\begin_layout Plain Layout

# put coefficients into a 3-dimensional array 
\end_layout

\begin_layout Plain Layout

bb <- array(b,dim=c(length(xdata),length(ydata),length(zdata)))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Use RcppSimpleTensor to Evaluate Spline
\end_layout

\begin_layout Standard
Next, we generate random data in the domain of our approximation, and evaluate
 the following expression, which is our approximant 
\begin_inset Formula $\hat{f}$
\end_inset

 at arbitrary data 
\begin_inset Formula $(x,y,z)$
\end_inset

:
\begin_inset Formula 
\[
\hat{f}(x,y,z)=\sum_{i}\sum_{j}\sum_{k}b_{i,j,k}X_{i}(x)Y_{j}(y)Z_{k}(z)
\]

\end_inset

where 
\begin_inset Formula $X_{i},Y_{j},Z_{k}$
\end_inset

 are the values of the i-th, j-th and k-th basis functions at the values
 
\begin_inset Formula $x,y,z$
\end_inset

, respectively.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval-spline-new,tidy=FALSE>>=
\end_layout

\begin_layout Plain Layout

new_xdata <- sort( runif(n=30,min=min(xdata),max=max(xdata)) ) 
\end_layout

\begin_layout Plain Layout

new_ydata <- sort( runif(n=25,min=min(int.y$nodes),max=max(int.y$nodes) )
 ) 
\end_layout

\begin_layout Plain Layout

new_zdata <- sort( runif(n=21,min=min(int.z$nodes),max=max(int.z$nodes) )
 ) 
\end_layout

\begin_layout Plain Layout

# basis for new values 
\end_layout

\begin_layout Plain Layout

new_X <- splineDesign(knots=xknots,x=new_xdata) 
\end_layout

\begin_layout Plain Layout

new_Y <- splineDesign(knots=yknots,x=new_ydata) 
\end_layout

\begin_layout Plain Layout

new_Z <- splineDesign(knots=zknots,x=new_zdata) 
\end_layout

\begin_layout Plain Layout

# define RcppSimpleTensor function 
\end_layout

\begin_layout Plain Layout

spline.eval <- tensorFunction(R[nx,ny,nz] ~ coeffs[mx,my,mz] * Xbase[nx,mx]
 * Ybase[ny,my] * Zbase[nz,mz])
\end_layout

\begin_layout Plain Layout

pred.vals <- spline.eval( bb, new_X, new_Y, new_Z )        
\end_layout

\begin_layout Plain Layout

# or simply with inline: 
\end_layout

\begin_layout Plain Layout

TIpred.vals <- TI( bb[m1,m2,m3] * new_X[n1,m1] * new_Y[n2,m2] * new_Z[n3,m3],
 n1+n2+n3)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's see how we are doing by plotting our approximant, again for the two
 most extreme values of z:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<plot-new,par=TRUE,tidy=FALSE,echo=FALSE,fig.width=4,fig.height=4,out.width=0.45
\backslash
linewidth,cache=FALSE>>=
\end_layout

\begin_layout Plain Layout

zind <- 1:length(new_zdata);
\end_layout

\begin_layout Plain Layout

persp(x=new_xdata,y=new_ydata,z=pred.vals[,,head(zind,1)],ticktype="detailed",xla
b="new_x",ylab="new_y",zlab="approx",theta=300,phi=30) 
\end_layout

\begin_layout Plain Layout

persp(x=new_xdata,y=new_ydata,z=pred.vals[,,tail(zind,1)],ticktype="detailed",xla
b="new_x",ylab="new_y",zlab="approx",theta=300,phi=30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Perform numerical Integration
\end_layout

\begin_layout Standard
Here we calculate the basis on the entire set of integration nodes, and
 then we multiply by quadrature weights and sum over the correct indices.
 We want to approximate
\begin_inset Formula 
\[
E_{YZ}\left[f(x,y,z)\right]=\int f(x,y,z)s(z)g(y)dzdy
\]

\end_inset

by
\begin_inset Formula 
\[
\hat{E}_{YZ}\left[f(x,y,z)\right]=\sum_{i}\sum_{j}\omega_{i}^{y}\omega_{j}^{z}\hat{f}(x,\tilde{y_{i}},\tilde{z_{j}})
\]

\end_inset

where 
\begin_inset Formula $\left(\omega^{y},\omega^{z},\tilde{y},\tilde{z}\right)$
\end_inset

 are quadrature weights and nodes for 
\begin_inset Formula $y,z$
\end_inset

 respectively.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<get-intdata,par=TRUE,tidy=FALSE,fig.width=4,fig.height=4,out.width=0.5
\backslash
linewidth,cache=FALSE>>=
\end_layout

\begin_layout Plain Layout

Int.base.z <- splineDesign(knots=zknots,x=int.z$nodes) 
\end_layout

\begin_layout Plain Layout

Int.base.y <- splineDesign(knots=yknots,x=int.y$nodes) 
\end_layout

\begin_layout Plain Layout

# evaluate spline with RcppSimple
\end_layout

\begin_layout Plain Layout

Intdata <- spline.eval( bb, X, Int.base.y, Int.base.z )
\end_layout

\begin_layout Plain Layout

yweights <- int.y$weights 
\end_layout

\begin_layout Plain Layout

zweights <- int.z$weights
\end_layout

\begin_layout Plain Layout

#### integrate
\end_layout

\begin_layout Plain Layout

#i.e.
 weighted sum over corresponding dimensions 
\end_layout

\begin_layout Plain Layout

RcppIntFun <- tensorFunction( R[nx] ~ Data[nx,ny,nz] * yweight[ny] * zweight[nz]
 ) 
\end_layout

\begin_layout Plain Layout

Int.y.z <- RcppIntFun( Intdata, yweights, zweights )
\end_layout

\begin_layout Plain Layout

# or inline
\end_layout

\begin_layout Plain Layout

TI.Int.y.z <- TI( Intdata[nx,ny,nz] * yweights[ny] * zweights[nz], nx ) 
\end_layout

\begin_layout Plain Layout

# compare
\end_layout

\begin_layout Plain Layout

sum(Int.y.z - TI.Int.y.z)
\end_layout

\begin_layout Plain Layout

dim(Int.y.z) 
\end_layout

\begin_layout Plain Layout

# plot integrated function
\end_layout

\begin_layout Plain Layout

plot(xdata,Int.y.z,type="l")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If we want to integrate only one out of many dimensions, like in 
\begin_inset Formula 
\[
\hat{E}_{Y}\left[f(x,y,z)\right]=\sum_{i}\omega_{i}^{y}\hat{f}(x,\tilde{y_{i}},z)
\]

\end_inset

or 
\begin_inset Formula 
\[
\hat{E}_{Z}\left[f(x,y,z)\right]=\sum_{j}\omega_{j}^{z}\hat{f}(x,y,\tilde{z_{j}})
\]

\end_inset

this is very easily accomplished with RcppSimpleTensor -- just select the
 right dimensions and recompute:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<one-only,echo=TRUE,tidy=FALSE>>=
\end_layout

\begin_layout Plain Layout

# integrate w.r.t.
 z only  
\end_layout

\begin_layout Plain Layout

Int.z <- TI( Intdata[nx,ny,nz] * zweights[nz], nx + ny) 
\end_layout

\begin_layout Plain Layout

dim(Int.z) 
\end_layout

\begin_layout Plain Layout

# integrate w.r.t.
 y only  
\end_layout

\begin_layout Plain Layout

Int.y <- TI( Intdata[nx,ny,nz] * yweights[ny], nx + nz ) 
\end_layout

\begin_layout Plain Layout

dim(Int.y)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can again inspect the result graphically:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<plot-last,par=TRUE,echo=FALSE,tidy=FALSE,fig.width=4,fig.height=4,out.width=0.45
\backslash
linewidth,cache=FALSE>>=
\end_layout

\begin_layout Plain Layout

persp(x=xdata,y=int.y$nodes,z=Int.z,xlab="xdata",ylab="int.y$nodes",zlab="Value",th
eta=300,phi=30)
\end_layout

\begin_layout Plain Layout

persp(x=xdata,y=int.z$nodes,z=Int.y,xlab="xdata",ylab="int.z$nodes",zlab="Value",th
eta=300,phi=30)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\end_body
\end_document
